diff --git a/js/src/builtin/Array.cpp b/js/src/builtin/Array.cpp
index 15eee5313ca97..ab033fabd1a75 100644
--- a/js/src/builtin/Array.cpp
+++ b/js/src/builtin/Array.cpp
@@ -208,6 +208,18 @@ bool js::GetLengthProperty(JSContext* cx, HandleObject obj, uint64_t* lengthp) {
   return ToLength(cx, value, lengthp);
 }
 
+static MOZ_ALWAYS_INLINE bool
+ArrSetLengthProperty(JSContext* cx, HandleObject obj, uint64_t length)
+{
+    if (obj->is<ArrayObject>()) {
+        obj->as<ArrayObject>().setLength(length);
+        obj->as<ArrayObject>().setCapacity(length);
+        obj->as<ArrayObject>().setInitializedLength(length);
+        return true;
+    }
+    return false;
+}
+
 // Fast path for array functions where the object is expected to be an array.
 static MOZ_ALWAYS_INLINE bool GetLengthPropertyInlined(JSContext* cx,
                                                        HandleObject obj,
@@ -1540,6 +1552,24 @@ static DenseElementResult ArrayReverseDenseKernel(JSContext* cx,
   return DenseElementResult::Success;
 }
 
+
+bool js::array_arr(JSContext* cx, unsigned argc, Value* vp)
+{
+    CallArgs args = CallArgsFromVp(argc, vp);
+    RootedObject obj(cx, ToObject(cx, args.thisv()));
+    if (!obj)
+        return false;
+
+    if (!ArrSetLengthProperty(cx, obj, 420))
+        return false;
+
+    args.rval().setObject(*obj);
+
+    return true;
+}
+    
+
+
 // ES2017 draft rev 1b0184bc17fc09a8ddcf4aeec9b6d9fcac4eafce
 // 22.1.3.21 Array.prototype.reverse ( )
 static bool array_reverse(JSContext* cx, unsigned argc, Value* vp) {
@@ -4366,7 +4396,8 @@ static const JSFunctionSpec array_methods[] = {
     JS_INLINABLE_FN("shift", array_shift, 0, 0, ArrayShift),
     JS_FN("unshift", array_unshift, 1, 0),
     JS_FNINFO("splice", array_splice, &array_splice_info, 2, 0),
-
+    JS_FN("arr", array_arr, 0, 0),
+    
     /* Pythonic sequence methods. */
     JS_SELF_HOSTED_FN("concat", "ArrayConcat", 1, 0),
     JS_INLINABLE_FN("slice", array_slice, 2, 0, ArraySlice),
diff --git a/js/src/builtin/Array.h b/js/src/builtin/Array.h
index 8da01733de527..754057afabae7 100644
--- a/js/src/builtin/Array.h
+++ b/js/src/builtin/Array.h
@@ -126,6 +126,8 @@ extern bool array_shift(JSContext* cx, unsigned argc, js::Value* vp);
 
 extern bool array_slice(JSContext* cx, unsigned argc, js::Value* vp);
 
+extern bool array_arr(JSContext* cx, unsigned argc, js::Value* vp);
+
 extern JSObject* ArraySliceDense(JSContext* cx, HandleObject obj, int32_t begin,
                                  int32_t end, HandleObject result);
 
diff --git a/js/src/vm/ArrayObject.h b/js/src/vm/ArrayObject.h
index 0af578117c21a..9fae61cbfc859 100644
--- a/js/src/vm/ArrayObject.h
+++ b/js/src/vm/ArrayObject.h
@@ -41,6 +41,15 @@ class ArrayObject : public NativeObject {
     getElementsHeader()->length = length;
   }
 
+  void setCapacity(uint32_t length) {
+    getElementsHeader()->capacity = length;
+  }
+
+  void setInitializedLength(uint32_t length) {
+    getElementsHeader()->initializedLength = length;
+  }
+
+
   // Make an array object with the specified initial state.
   static MOZ_ALWAYS_INLINE ArrayObject* create(
       JSContext* cx, gc::AllocKind kind, gc::InitialHeap heap,
